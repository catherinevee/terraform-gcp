name: Development Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/dev-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/dev-pipeline.yml'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_VAR_region: 'us-central1'

jobs:
  # Stage 1: Validation
  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: |
        cd infrastructure/environments/dev
        terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: |
        cd infrastructure/environments/dev
        terraform init -backend=false
        terraform validate
    
    - name: Security Scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      continue-on-error: true
      with:
        working_directory: infrastructure/environments/dev
        soft_fail: true

  # Stage 2: Planning
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event.inputs.operation == 'plan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/dev
        terraform init -reconfigure
    
    - name: Terraform Plan
      run: |
        cd infrastructure/environments/dev
        terraform plan -var-file=terraform.tfvars -out=tfplan-dev
      env:
        TF_VAR_environment: dev
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: infrastructure/environments/dev/tfplan-dev
        retention-days: 1

  # Stage 3: Deployment
  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/dev
        terraform init -reconfigure

    - name: Create BigQuery Datasets for Logging
      run: |
        bq mk --dataset --location=US --description="Application logs dataset" ${{ secrets.GCP_PROJECT_ID }}:application_logs || true
        bq mk --dataset --location=US --description="Security logs dataset" ${{ secrets.GCP_PROJECT_ID }}:security_logs || true

    - name: Terraform Apply
      if: github.event.inputs.operation != 'destroy'
      run: |
        cd infrastructure/environments/dev
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev
    
    - name: Terraform Destroy
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev
        echo "‚ö†Ô∏è  WARNING: This will destroy ALL infrastructure resources in the dev environment!"
        echo "üîç Running terraform plan to show what will be destroyed..."
        terraform plan -destroy -var-file=terraform.tfvars
        echo "üóëÔ∏è  Proceeding with destruction..."
        terraform destroy -var-file=terraform.tfvars -auto-approve
        echo "‚úÖ Infrastructure destruction completed"
      env:
        TF_VAR_environment: dev
    
    - name: Verify Deployment
      if: github.event.inputs.operation != 'destroy'
      run: |
        echo "‚úÖ Development deployment completed successfully!"
        echo "Checking deployed resources..."
        gcloud compute instances list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No compute instances found"
        gcloud run services list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No Cloud Run services found"
        gcloud sql instances list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No Cloud SQL instances found"
        gcloud storage buckets list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No storage buckets found"

    - name: Verify Destruction
      if: github.event.inputs.operation == 'destroy'
      run: |
        echo "üîç Verifying infrastructure destruction..."
        echo "üìä Checking remaining resources:"
        echo "Compute Instances:"
        gcloud compute instances list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No instances found (expected)"
        echo "Cloud Run Services:"
        gcloud run services list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No services found (expected)"
        echo "Cloud SQL Instances:"
        gcloud sql instances list --project=${{ secrets.GCP_PROJECT_ID }} || echo "No databases found (expected)"
        echo "Storage Buckets (excluding terraform state):"
        gcloud storage buckets list --project=${{ secrets.GCP_PROJECT_ID }} --filter="name:acme-ecommerce" || echo "No application buckets found (expected)"
        echo "‚úÖ Infrastructure destruction verification completed"

  # Stage 4: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Deployment Success
      if: needs.deploy.result == 'success' && github.event.inputs.operation != 'destroy'
      run: |
        echo "‚úÖ Development deployment successful!"
        echo "Pipeline completed successfully for development environment"
    
    - name: Notify Destruction Success
      if: needs.deploy.result == 'success' && github.event.inputs.operation == 'destroy'
      run: |
        echo "‚úÖ Development environment destruction successful!"
        echo "All infrastructure resources have been removed"
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        if [ "${{ github.event.inputs.operation }}" == "destroy" ]; then
          echo "‚ùå Development environment destruction failed!"
        else
          echo "‚ùå Development deployment failed!"
        fi
        echo "Check logs for details"
