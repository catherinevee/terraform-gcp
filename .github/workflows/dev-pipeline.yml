name: Multi-Region Development Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/dev-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/dev-pipeline.yml'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      region:
        description: 'Target region (or all for multi-region)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - global
          - us-central1
          - us-east1

env:
  TF_VERSION: '1.5.0'
  PROJECT_ID: 'acme-ecommerce-platform-dev'

jobs:
  # Stage 1: Validation
  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check - Global
      run: |
        cd infrastructure/environments/dev/global
        terraform fmt -check -recursive
    
    - name: Terraform Format Check - US Central1
      run: |
        cd infrastructure/environments/dev/us-central1
        terraform fmt -check -recursive
    
    - name: Terraform Format Check - US East1
      run: |
        cd infrastructure/environments/dev/us-east1
        terraform fmt -check -recursive
    
    - name: Terraform Validate - Global
      run: |
        cd infrastructure/environments/dev/global
        terraform init -backend=false
        terraform validate
    
    - name: Terraform Validate - US Central1
      run: |
        cd infrastructure/environments/dev/us-central1
        terraform init -backend=false
        terraform validate
    
    - name: Terraform Validate - US East1
      run: |
        cd infrastructure/environments/dev/us-east1
        terraform init -backend=false
        terraform validate

  # Stage 2: Global Resources Deployment
  deploy-global:
    name: Deploy Global Resources
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.region == 'all' || github.event.inputs.region == 'global' || github.event_name != 'workflow_dispatch'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}

    - name: Create BigQuery Datasets for Logging
      run: |
        bq mk --dataset --location=US --description="Application logs dataset" ${{ env.PROJECT_ID }}:application_logs || true
        bq mk --dataset --location=US --description="Security logs dataset" ${{ env.PROJECT_ID }}:security_logs || true

    - name: Terraform Init - Global
      run: |
        cd infrastructure/environments/dev/global
        terraform init -reconfigure

    - name: Terraform Plan - Global
      if: github.event.inputs.operation == 'plan' || github.event_name == 'pull_request'
      run: |
        cd infrastructure/environments/dev/global
        terraform plan -var-file=terraform.tfvars -out=tfplan-global
      env:
        TF_VAR_environment: dev

    - name: Terraform Apply - Global
      if: github.event.inputs.operation == 'apply'
      run: |
        cd infrastructure/environments/dev/global
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev

    - name: Terraform Destroy - Global
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev/global
        echo "‚ö†Ô∏è  WARNING: This will destroy ALL global infrastructure resources!"
        echo "üîç Running terraform plan to show what will be destroyed..."
        terraform plan -destroy -var-file=terraform.tfvars
        echo "üóëÔ∏è  Proceeding with destruction..."
        terraform destroy -var-file=terraform.tfvars -auto-approve
        echo "‚úÖ Global infrastructure destruction completed"
      env:
        TF_VAR_environment: dev

  # Stage 3: Regional Resources Deployment - US Central1
  deploy-us-central1:
    name: Deploy US Central1 Resources
    runs-on: ubuntu-latest
    needs: [validate, deploy-global]
    if: github.event.inputs.region == 'all' || github.event.inputs.region == 'us-central1' || github.event_name != 'workflow_dispatch'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/region us-central1

    - name: Terraform Init - US Central1
      run: |
        cd infrastructure/environments/dev/us-central1
        terraform init -reconfigure

    - name: Terraform Plan - US Central1
      if: github.event.inputs.operation == 'plan' || github.event_name == 'pull_request'
      run: |
        cd infrastructure/environments/dev/us-central1
        terraform plan -var-file=terraform.tfvars -out=tfplan-us-central1
      env:
        TF_VAR_environment: dev

    - name: Terraform Apply - US Central1
      if: github.event.inputs.operation == 'apply'
      run: |
        cd infrastructure/environments/dev/us-central1
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev

    - name: Terraform Destroy - US Central1
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev/us-central1
        echo "‚ö†Ô∏è  WARNING: This will destroy ALL US Central1 infrastructure resources!"
        echo "üîç Running terraform plan to show what will be destroyed..."
        terraform plan -destroy -var-file=terraform.tfvars
        echo "üóëÔ∏è  Proceeding with destruction..."
        terraform destroy -var-file=terraform.tfvars -auto-approve
        echo "‚úÖ US Central1 infrastructure destruction completed"
      env:
        TF_VAR_environment: dev

  # Stage 4: Regional Resources Deployment - US East1
  deploy-us-east1:
    name: Deploy US East1 Resources
    runs-on: ubuntu-latest
    needs: [validate, deploy-global]
    if: github.event.inputs.region == 'all' || github.event.inputs.region == 'us-east1' || github.event_name != 'workflow_dispatch'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/region us-east1

    - name: Terraform Init - US East1
      run: |
        cd infrastructure/environments/dev/us-east1
        terraform init -reconfigure

    - name: Terraform Plan - US East1
      if: github.event.inputs.operation == 'plan' || github.event_name == 'pull_request'
      run: |
        cd infrastructure/environments/dev/us-east1
        terraform plan -var-file=terraform.tfvars -out=tfplan-us-east1
      env:
        TF_VAR_environment: dev

    - name: Terraform Apply - US East1
      if: github.event.inputs.operation == 'apply'
      run: |
        cd infrastructure/environments/dev/us-east1
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev

    - name: Terraform Destroy - US East1
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev/us-east1
        echo "‚ö†Ô∏è  WARNING: This will destroy ALL US East1 infrastructure resources!"
        echo "üîç Running terraform plan to show what will be destroyed..."
        terraform plan -destroy -var-file=terraform.tfvars
        echo "üóëÔ∏è  Proceeding with destruction..."
        terraform destroy -var-file=terraform.tfvars -auto-approve
        echo "‚úÖ US East1 infrastructure destruction completed"
      env:
        TF_VAR_environment: dev

  # Stage 5: Cross-Region Networking
  deploy-cross-region:
    name: Deploy Cross-Region Networking
    runs-on: ubuntu-latest
    needs: [deploy-us-central1, deploy-us-east1]
    if: github.event.inputs.region == 'all' || github.event_name != 'workflow_dispatch'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}

    - name: Create Cross-Region Networking Configuration
      run: |
        mkdir -p infrastructure/environments/dev/cross-region
        cat > infrastructure/environments/dev/cross-region/main.tf << 'EOF'
        # Cross-Region Networking Configuration
        terraform {
          required_version = ">= 1.5.0"
          required_providers {
            google = {
              source  = "hashicorp/google"
              version = "~> 5.45.2"
            }
          }
        }

        provider "google" {
          project = var.project_id
        }

        # Data sources to reference regional resources
        data "terraform_remote_state" "us_central1" {
          backend = "gcs"
          config = {
            bucket = "acme-ecommerce-platform-dev-terraform-state"
            prefix = "terraform/state/us-central1"
          }
        }

        data "terraform_remote_state" "us_east1" {
          backend = "gcs"
          config = {
            bucket = "acme-ecommerce-platform-dev-terraform-state"
            prefix = "terraform/state/us-east1"
          }
        }

        # Cross-region networking module
        module "cross_region_networking" {
          source = "../../../modules/networking/cross-region"

          project_id = var.project_id
          primary_region = "us-central1"
          secondary_region = "us-east1"
          primary_network_self_link = data.terraform_remote_state.us_central1.outputs.vpc_network_self_link
          secondary_network_self_link = data.terraform_remote_state.us_east1.outputs.vpc_network_self_link
          vpn_shared_secret = var.vpn_shared_secret
        }
        EOF

        cat > infrastructure/environments/dev/cross-region/variables.tf << 'EOF'
        variable "project_id" {
          description = "GCP Project ID"
          type        = string
        }

        variable "vpn_shared_secret" {
          description = "VPN shared secret"
          type        = string
          sensitive   = true
          default     = "your-vpn-shared-secret-here"
        }
        EOF

        cat > infrastructure/environments/dev/cross-region/terraform.tfvars << 'EOF'
        project_id = "acme-ecommerce-platform-dev"
        vpn_shared_secret = "acme-ecommerce-vpn-secret-2024"
        EOF

        cat > infrastructure/environments/dev/cross-region/backend.tf << 'EOF'
        terraform {
          backend "gcs" {
            bucket = "acme-ecommerce-platform-dev-terraform-state"
            prefix = "terraform/state/cross-region"
          }
        }
        EOF

    - name: Terraform Init - Cross-Region
      run: |
        cd infrastructure/environments/dev/cross-region
        terraform init -reconfigure

    - name: Terraform Plan - Cross-Region
      if: github.event.inputs.operation == 'plan' || github.event_name == 'pull_request'
      run: |
        cd infrastructure/environments/dev/cross-region
        terraform plan -var-file=terraform.tfvars -out=tfplan-cross-region

    - name: Terraform Apply - Cross-Region
      if: github.event.inputs.operation == 'apply'
      run: |
        cd infrastructure/environments/dev/cross-region
        terraform apply -var-file=terraform.tfvars -auto-approve

    - name: Terraform Destroy - Cross-Region
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev/cross-region
        echo "‚ö†Ô∏è  WARNING: This will destroy cross-region networking!"
        terraform destroy -var-file=terraform.tfvars -auto-approve

  # Stage 6: Verification
  verify-deployment:
    name: Verify Multi-Region Deployment
    runs-on: ubuntu-latest
    needs: [deploy-global, deploy-us-central1, deploy-us-east1, deploy-cross-region]
    if: github.event.inputs.operation != 'destroy' && (github.event.inputs.region == 'all' || github.event_name != 'workflow_dispatch')
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}

    - name: Verify Global Resources
      run: |
        echo "üîç Verifying global resources..."
        echo "VPC Networks:"
        gcloud compute networks list --filter="name:acme-ecommerce-platform-vpc-dev" || echo "No VPC networks found"
        echo "Load Balancers:"
        gcloud compute forwarding-rules list --global --filter="name:acme-ecommerce-platform-lb" || echo "No global load balancers found"
        echo "Service Accounts:"
        gcloud iam service-accounts list --filter="email:acme-ecommerce" || echo "No service accounts found"

    - name: Verify US Central1 Resources
      run: |
        echo "üîç Verifying US Central1 resources..."
        echo "Compute Instances:"
        gcloud compute instances list --filter="zone:us-central1" || echo "No instances found in us-central1"
        echo "Cloud Run Services:"
        gcloud run services list --region=us-central1 --filter="metadata.name:acme" || echo "No Cloud Run services found in us-central1"
        echo "Cloud SQL Instances:"
        gcloud sql instances list --filter="region:us-central1" || echo "No Cloud SQL instances found in us-central1"

    - name: Verify US East1 Resources
      run: |
        echo "üîç Verifying US East1 resources..."
        echo "Compute Instances:"
        gcloud compute instances list --filter="zone:us-east1" || echo "No instances found in us-east1"
        echo "Cloud Run Services:"
        gcloud run services list --region=us-east1 --filter="metadata.name:acme" || echo "No Cloud Run services found in us-east1"
        echo "Cloud SQL Instances:"
        gcloud sql instances list --filter="region:us-east1" || echo "No Cloud SQL instances found in us-east1"

    - name: Verify Cross-Region Connectivity
      run: |
        echo "üîç Verifying cross-region connectivity..."
        echo "VPC Peerings:"
        gcloud compute networks peerings list --filter="name:acme-ecommerce-platform-dev" || echo "No VPC peerings found"
        echo "VPN Tunnels:"
        gcloud compute vpn-tunnels list --filter="name:acme-ecommerce-platform-dev" || echo "No VPN tunnels found"

  # Stage 7: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-global, deploy-us-central1, deploy-us-east1, deploy-cross-region, verify-deployment]
    if: always()

    steps:
    - name: Notify Multi-Region Deployment Success
      if: needs.deploy-global.result == 'success' && needs.deploy-us-central1.result == 'success' && needs.deploy-us-east1.result == 'success' && github.event.inputs.operation != 'destroy'
      run: |
        echo "‚úÖ Multi-region development deployment successful!"
        echo "üåç Global resources deployed"
        echo "üá∫üá∏ US Central1 resources deployed"
        echo "üá∫üá∏ US East1 resources deployed"
        echo "üîó Cross-region networking configured"

    - name: Notify Regional Deployment Success
      if: (needs.deploy-us-central1.result == 'success' || needs.deploy-us-east1.result == 'success') && github.event.inputs.region != 'all' && github.event.inputs.operation != 'destroy'
      run: |
        echo "‚úÖ Regional development deployment successful!"
        echo "Target region: ${{ github.event.inputs.region }}"

    - name: Notify Destruction Success
      if: github.event.inputs.operation == 'destroy' && (needs.deploy-global.result == 'success' || needs.deploy-us-central1.result == 'success' || needs.deploy-us-east1.result == 'success')
      run: |
        echo "‚úÖ Multi-region infrastructure destruction successful!"
        echo "All specified resources have been removed"

    - name: Notify Failure
      if: needs.deploy-global.result == 'failure' || needs.deploy-us-central1.result == 'failure' || needs.deploy-us-east1.result == 'failure'
      run: |
        if [ "${{ github.event.inputs.operation }}" == "destroy" ]; then
          echo "‚ùå Multi-region infrastructure destruction failed!"
        else
          echo "‚ùå Multi-region development deployment failed!"
        fi
        echo "Check logs for details"