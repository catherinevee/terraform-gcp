name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/ci-cd-pipeline.yml'
  pull_request:
    branches: [ main, develop, staging ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/ci-cd-pipeline.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      operation:
        description: 'Operation to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_VAR_region: 'us-central1'

jobs:
  # Stage 1: Validation & Security
  validate-and-scan:
    name: Validate and Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: |
        cd infrastructure/environments/dev
        terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: |
        cd infrastructure/environments/dev
        terraform init -backend=false
        terraform validate
    
    - name: Security Scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: infrastructure/environments/dev
        soft_fail: true
    
    - name: Security Scan with Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/environments/dev
        framework: terraform
        soft_fail: true
    
    - name: Security Scan with Terrascan
      uses: accurics/terrascan-action@v1.0.0
      with:
        iac_type: terraform
        iac_version: v14
        policy_type: gcp
        only_warn: true

  # Stage 2: Planning & Review
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate-and-scan
    if: github.event_name == 'pull_request' || github.event.inputs.operation == 'plan'
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/${{ matrix.environment }}
        terraform init
    
    - name: Terraform Plan
      run: |
        cd infrastructure/environments/${{ matrix.environment }}
        terraform plan -var-file=terraform.tfvars -out=tfplan-${{ matrix.environment }}
      env:
        TF_VAR_environment: ${{ matrix.environment }}
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: infrastructure/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}
        retention-days: 1
    
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const planPath = path.join('infrastructure/environments/${{ matrix.environment }}', 'tfplan-${{ matrix.environment }}');
            if (fs.existsSync(planPath)) {
              const plan = fs.readFileSync(planPath, 'utf8');
              const output = `## Terraform Plan - ${{ matrix.environment }}
              
              \`\`\`hcl
              ${plan}
              \`\`\`
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
          } catch (error) {
            console.error('Error commenting PR:', error);
          }

  # Stage 3: Testing
  test:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    needs: validate-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Run Terratest
      run: |
        cd test/unit
        go test -v ./...
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ env.TF_VAR_region }}

  # Stage 4: Deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate-and-scan, test]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/dev
        terraform init
    
    - name: Terraform Apply
      if: github.event.inputs.operation != 'destroy'
      run: |
        cd infrastructure/environments/dev
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev
    
    - name: Terraform Destroy
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/dev
        terraform destroy -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: dev
    
    - name: Verify Deployment
      if: github.event.inputs.operation != 'destroy'
      run: |
        gcloud compute instances list --project=${{ secrets.GCP_PROJECT_ID }}
        gcloud run services list --project=${{ secrets.GCP_PROJECT_ID }}
        gcloud sql instances list --project=${{ secrets.GCP_PROJECT_ID }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-and-scan, test]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/staging
        terraform init
    
    - name: Terraform Apply
      if: github.event.inputs.operation != 'destroy'
      run: |
        cd infrastructure/environments/staging
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: staging
    
    - name: Terraform Destroy
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/staging
        terraform destroy -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: staging

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-and-scan, test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/region ${{ env.TF_VAR_region }}
    
    - name: Terraform Init
      run: |
        cd infrastructure/environments/prod
        terraform init
    
    - name: Terraform Apply
      if: github.event.inputs.operation != 'destroy'
      run: |
        cd infrastructure/environments/prod
        terraform apply -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: prod
    
    - name: Terraform Destroy
      if: github.event.inputs.operation == 'destroy'
      run: |
        cd infrastructure/environments/prod
        terraform destroy -var-file=terraform.tfvars -auto-approve
      env:
        TF_VAR_environment: prod

  # Stage 5: Monitoring & Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Teams notification here
    
    - name: Notify Failure
      if: needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-prod.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Teams notification here
