name: Update Deployment Status

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update status badges'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

env:
  PROJECT_ID: 'cataziza-platform-dev'
  STATUS_DIR: 'docs/status'

jobs:
  update-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'scripts/status/package.json'
    
    - name: Install Dependencies
      run: |
        cd scripts/status
        npm install
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/region europe-west1
    
    - name: Check Deployment Status
      id: status_check
      run: |
        cd scripts/status
        chmod +x check-deployment-status.sh
        ./check-deployment-status.sh
        
        # Read the status from the output file
        if [ -f deployment-status.json ]; then
          STATUS=$(jq -r '.status' deployment-status.json)
          PERCENTAGE=$(jq -r '.percentage' deployment-status.json)
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
        else
          echo "status=UNALIVE" >> $GITHUB_OUTPUT
          echo "percentage=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate Status Badges
      run: |
        cd scripts/status
        node generate-badges.js
        
        # Copy generated badges to docs/status directory
        mkdir -p ../../docs/status
        cp *.svg ../../docs/status/
        cp deployment-status.json ../../docs/status/
    
    - name: Update Status Dashboard
      run: |
        cd scripts/status
        node -e "
        const fs = require('fs');
        const status = '${{ steps.status_check.outputs.status }}';
        const percentage = '${{ steps.status_check.outputs.percentage }}';
        const timestamp = new Date().toISOString();
        
        const dashboard = \`<!DOCTYPE html>
        <html lang=\"en\">
        <head>
            <meta charset=\"UTF-8\">
            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
            <title>Cataziza Platform - Deployment Status</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 30px; }
                .status-badge { font-size: 24px; font-weight: bold; padding: 10px 20px; border-radius: 20px; display: inline-block; }
                .live { background: #d4edda; color: #155724; }
                .partial { background: #fff3cd; color: #856404; }
                .notdeployed { background: #f8d7da; color: #721c24; }
                .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
                .metric { text-align: center; padding: 15px; background: #f8f9fa; border-radius: 5px; }
                .metric-value { font-size: 28px; font-weight: bold; color: #007bff; }
                .metric-label { color: #6c757d; margin-top: 5px; }
                .footer { text-align: center; margin-top: 30px; color: #6c757d; font-size: 14px; }
                .refresh { margin-top: 20px; }
                .refresh button { background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }
                .refresh button:hover { background: #0056b3; }
            </style>
        </head>
        <body>
            <div class=\"container\">
                <div class=\"header\">
                    <h1>ðŸš€ Cataziza Platform Deployment Status</h1>
                    <div class=\"status-badge \${status.toLowerCase()}\">\${status}</div>
                </div>
                
                <div class=\"metrics\">
                    <div class=\"metric\">
                        <div class=\"metric-value\">\${percentage}%</div>
                        <div class=\"metric-label\">Deployment Health</div>
                    </div>
                    <div class=\"metric\">
                        <div class=\"metric-value\">\${status}</div>
                        <div class=\"metric-label\">Current Status</div>
                    </div>
                    <div class=\"metric\">
                        <div class=\"metric-value\">\${timestamp.split('T')[0]}</div>
                        <div class=\"metric-label\">Last Updated</div>
                    </div>
                </div>
                
                <div class=\"refresh\">
                    <button onclick=\"location.reload()\">ðŸ”„ Refresh Status</button>
                </div>
                
                <div class=\"footer\">
                    <p>Status updated every 15 minutes via GitHub Actions</p>
                    <p>Badge URL: <a href=\"badge.svg\">badge.svg</a> | <a href=\"deployment-status.json\">JSON API</a></p>
                </div>
            </div>
        </body>
        </html>\`;
        
        fs.writeFileSync('../../docs/status/index.html', dashboard);
        "
    
    - name: Commit and Push Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all changes
        git add docs/status/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update deployment status: ${{ steps.status_check.outputs.status }} (${{ steps.status_check.outputs.percentage }}%)"
          git push
        fi
    
    - name: Upload Status Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: status-files
        path: |
          docs/status/
          scripts/status/deployment-status.json
        retention-days: 7
